---
role: Agent
resources:
  requests:
    cpu: 512m
    memory: 1024Mi
  limits:
    cpu: 2000m
    memory: 2048Mi
customConfig:
  data_dir: /vector-data-dir
  api:
    enabled: true
    address: 127.0.0.1:8686
    playground: false
  sources:
    kubernetes_logs:
      type: kubernetes_logs
      rotate_wait_secs: 5
      glob_minimum_cooldown_ms: 500
      max_read_bytes: 3145728
      max_line_bytes: 3145728
      auto_partial_merge: true
      extra_label_selector: "app.kubernetes.io/managed-by in (tekton-pipelines,pipelinesascode.tekton.dev)"
    internal_metrics:
      type: internal_metrics
  transforms:
    remap_app_logs:
      type: remap
      inputs: [kubernetes_logs]
      source: |-
        .log_type = "application"
        .kubernetes_namespace_name = .kubernetes.pod_namespace
            if exists(.kubernetes.pod_labels."tekton.dev/taskRunUID") {
              .taskRunUID = del(.kubernetes.pod_labels."tekton.dev/taskRunUID")
            } else {
              .taskRunUID = "none"
              }
            if exists(.kubernetes.pod_labels."tekton.dev/pipelineRunUID") {
              .pipelineRunUID = del(.kubernetes.pod_labels."tekton.dev/pipelineRunUID")
            .result = .pipelineRunUID
            } else {
               .result = .taskRunUID
            }
            if exists(.kubernetes.pod_labels."tekton.dev/task") {
              .task = del(.kubernetes.pod_labels."tekton.dev/task")
            } else {
              .task = "none"
            }
            if exists(.kubernetes.pod_namespace) {
              .namespace = del(.kubernetes.pod_namespace)
            } else {
              .namespace = "unlabeled"
            }
            .pod = .kubernetes.pod_name
            .container = .kubernetes.container_name
  sinks:
    aws_s3:
      type: "aws_s3"
      bucket: ${BUCKET}
      buffer:
        type: "disk"
        max_size: 1073741824
      inputs: ["remap_app_logs"]
      compression: "none"
      endpoint: ${ENDPOINT}
      encoding:
        codec: "text"
      key_prefix: "/logs/{{ `{{ .namespace }}` }}/{{`{{ .result }}`}}/{{`{{ .taskRunUID }}`}}/{{`{{ .container }}`}}"
      filename_time_format: ""
      filename_append_uuid: false
env:
  - name: AWS_ACCESS_KEY_ID
    valueFrom:
      secretKeyRef:
        name: tekton-results-s3
        key: aws_access_key_id
  - name: AWS_SECRET_ACCESS_KEY
    valueFrom:
      secretKeyRef:
        name: tekton-results-s3
        key: aws_secret_access_key
  - name: AWS_DEFAULT_REGION
    valueFrom:
      secretKeyRef:
        name: tekton-results-s3
        key: aws_region
  - name: BUCKET
    valueFrom:
      secretKeyRef:
        name: tekton-results-s3
        key: bucket
  - name: ENDPOINT
    valueFrom:
      secretKeyRef:
        name: tekton-results-s3
        key: endpoint
tolerations:
  - effect: NoSchedule
    key: konflux-ci.dev/workload
    operator: Exists
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - CHOWN
    - DAC_OVERRIDE
    - FOWNER
    - FSETID
    - KILL
    - NET_BIND_SERVICE
    - SETGID
    - SETPCAP
    - SETUID
  readOnlyRootFilesystem: true
  seLinuxOptions:
    type: spc_t
  seccompProfile:
    type: RuntimeDefault
