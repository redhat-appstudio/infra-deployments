---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dex
  name: dex
  annotations:
    ignore-check.kube-linter.io/no-anti-affinity: "Using topologySpreadConstraints"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      serviceAccountName: dex
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: dex
      containers:
      - image: ghcr.io/dexidp/dex:v2.32.0
        name: dex
        command: ["/usr/local/bin/dex", "serve", "/etc/dex/cfg/config.yaml"]
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
        ports:
        - name: https
          containerPort: 9443
        - name: telemetry
          containerPort: 5558
          protocol: TCP
        volumeMounts:
        - name: dex
          mountPath: /etc/dex/cfg
        - name: tls
          mountPath: /etc/dex/tls
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: telemetry
        env:
        - name: OPENSHIFT_OAUTH_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: dex-client
              key: token
        - name: OAUTH2_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: oauth2-proxy-client-secret
              key: client-secret
      volumes:
      - name: dex
        configMap:
          name: dex
          defaultMode: 420
          items:
          - key: dex-config.yaml
            path: config.yaml
      - name: tls
        secret:
          secretName: dex-cert
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: dex-cert
spec:
  type: ClusterIP
  ports:
  - name: dex
    port: 9443
    protocol: TCP
    targetPort: 9443
  selector:
    app: dex
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: dex
  name: dex
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dex
rules:
- apiGroups: ["dex.coreos.com"] # API group created by dex
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"] # To manage its own resources, dex must be able to create customresourcedefinitions
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dex           # Service account assigned to the dex pod, created above
  namespace: konflux-ui  # The namespace dex is running in
