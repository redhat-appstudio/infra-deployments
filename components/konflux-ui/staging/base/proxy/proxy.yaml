---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: proxy
  name: proxy
  annotations:
    ignore-check.kube-linter.io/no-anti-affinity: "Using topologySpreadConstraints"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: proxy
  minReadySeconds: 30
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: proxy
    spec:
      serviceAccountName: proxy
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: proxy
      initContainers:
      - name: copy-static-content
        image: quay.io/konflux-ci/konflux-ui:68500b32e57278bf33ac18d4ef631ef243abb579
        command:
          - cp
          - -R
          - /opt/app-root/src/.
          - /mnt/static-content/
        volumeMounts:
        - name: static-content
          mountPath: /mnt/static-content
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
        resources:
          limits:
            cpu: 50m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      - name: render-runtime-config
        image: registry.access.redhat.com/ubi9/ubi@sha256:66233eebd72bb5baa25190d4f55e1dc3fff3a9b77186c1f91a0abdb274452072
        envFrom:
        - secretRef:
            name: watson-config
        command:
          - sh
          - -c
          - |
            set -e

            out=/mnt/static-content/runtime-config.js
            printf "window.KONFLUX_RUNTIME = window.KONFLUX_RUNTIME || {};\n" > "$out"
            env | grep -E '^PUBLIC_' | while IFS='=' read -r name value; do
              esc=$(printf '%s' "$value" | sed -e 's/\\\\/\\\\\\\\/g' -e 's/\"/\\\"/g')
              printf 'window.KONFLUX_RUNTIME.%s = "%s";\n' "$name" "$esc" >> "$out"
            done

            # Apply cluster-specific overrides from ConfigMap files, if present
            if [ -d /mnt/ui-runtime-env-variables ]; then
              for f in /mnt/ui-runtime-env-variables/*; do
                [ -f "$f" ] || continue
                name=$(basename "$f")
                value=$(cat "$f")
                esc=$(printf '%s' "$value" | sed -e 's/\\\\/\\\\\\\\/g' -e 's/\"/\\\"/g')
                printf 'if (window.KONFLUX_RUNTIME["%s"] === undefined) { window.KONFLUX_RUNTIME["%s"] = "%s"; }\n' "$name" "$name" "$esc" >> "$out"
              done
            fi
        volumeMounts:
        - name: static-content
          mountPath: /mnt/static-content
        - name: ui-runtime-env-variables
          mountPath: /mnt/ui-runtime-env-variables
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
        resources:
          limits:
            cpu: 50m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      - name: generate-nginx-configs
        image: registry.access.redhat.com/ubi9/ubi@sha256:66233eebd72bb5baa25190d4f55e1dc3fff3a9b77186c1f91a0abdb274452072
        env:
        - name: WATSON_API_KEY
          valueFrom:
            secretKeyRef:
              name: watson-config
              key: API_KEY
        command:
          - sh
          - -c
          - |
            set -e

            # Generate auth.conf with bearer token replacement
            token=$(cat /mnt/api-token/token)
            sed "s/__BEARER_TOKEN__/$token/g" /mnt/nginx-templates/auth.conf > /mnt/nginx-generated-config/auth.conf

            chmod 640 /mnt/nginx-generated-config/auth.conf

            # Generate watson-auth.conf with Basic auth from Watson API key
            watson_basic=$(printf "apikey:%s" "$WATSON_API_KEY" | base64 | tr -d '\n')
            sed "s/__WATSON_BASIC_AUTH__/$watson_basic/g" /mnt/nginx-templates/watson-auth.conf > /mnt/nginx-generated-config/watson-auth.conf

            chmod 640 /mnt/nginx-generated-config/watson-auth.conf

        volumeMounts:
        - name: nginx-generated-config
          mountPath: /mnt/nginx-generated-config
        - name: nginx-templates
          mountPath: /mnt/nginx-templates
        - name: api-token
          mountPath: /mnt/api-token
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
        resources:
          limits:
            cpu: 50m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      containers:
      - image: registry.access.redhat.com/ubi9/nginx-124@sha256:b924363ff07ee0f8fd4f680497da774ac0721722a119665998ff5b2111098ad1
        name: nginx
        command: 
          - nginx
          - "-g"
          - "daemon off;"
          - -c
          - /etc/nginx/nginx.conf
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        ports:
        - containerPort: 8080
          name: web
          protocol: TCP
        - containerPort: 9443
          name: web-tls
          protocol: TCP
        resources:
          limits:
            cpu: 300m
            memory: 256Mi
          requests:
            cpu: 30m
            memory: 128Mi
        volumeMounts:
          - mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
            name: proxy
            readOnly: true
          - name: logs
            mountPath: /var/log/nginx
          - name: nginx-tmp
            mountPath: /var/lib/nginx/tmp
          - name: run
            mountPath: /run
          - name: serving-cert
            mountPath: /mnt
          - name: nginx-generated-config
            mountPath: /mnt/nginx-generated-config
          - name: nginx-static
            mountPath: /mnt/nginx-additional-location-configs
          - name: static-content
            mountPath: /opt/app-root/src/static-content
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
      - image: quay.io/oauth2-proxy/oauth2-proxy@sha256:3da33b9670c67bd782277f99acadf7026f75b9507bfba2088eb2d497266ef7fc
        name: oauth2-proxy
        env:
        - name: OAUTH2_PROXY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: oauth2-proxy-client-secret
              key: client-secret
        - name: OAUTH2_PROXY_COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: oauth2-proxy-cookie-secret
              key: cookie-secret
        args:
          - tba
        ports:
          - containerPort: 6000
            name: web
            protocol: TCP
        resources:
          limits:
            cpu: 300m
            memory: 256Mi
          requests:
            cpu: 30m
            memory: 128Mi
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
      - image: quay.io/factory2/otel-collector-sp/otel-binary-image:0.137.0
        imagePullPolicy: Always
        name: otel-collector
        command: ["/usr/local/bin/otel-collector-sp", "--config", "/conf/otel-collector-config.yaml"]
        ports:
        - containerPort: 8889
          name: otel-metrics
        - containerPort: 13133
          name: otel-health
          protocol: TCP
        volumeMounts:
        - name: logs
          mountPath: /var/log/nginx
        - mountPath: /conf/otel-collector-config.yaml
          subPath: otel-collector-config.yaml
          name: otel-collector-config
          readOnly: true
        readinessProbe:
          httpGet:
            path: /health
            port: 13133
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 13133
          initialDelaySeconds: 30
          periodSeconds: 60
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
        resources:
          limits:
            cpu: 150m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 128Mi
      volumes:
        - configMap:
            defaultMode: 420
            name: proxy
            items:
              - key: nginx.conf
                path: nginx.conf 
          name: proxy
        - configMap:
            defaultMode: 420
            name: proxy-nginx-templates
          name: nginx-templates
        - configMap:
            defaultMode: 420
            name: proxy-nginx-static
          name: nginx-static
        - name: logs
          emptyDir: {}
        - name: nginx-tmp
          emptyDir: {}
        - name: run
          emptyDir: {}
        - name: serving-cert
          secret:
            secretName: serving-cert
        - name: nginx-generated-config
          emptyDir: {}
        - name: api-token
          secret:
            secretName: proxy
        - name: static-content
          emptyDir: {}
        - name: ui-runtime-env-variables
          configMap:
            name: ui-runtime-env-variables
            optional: true
        - configMap:
            defaultMode: 420
            name: otel-collector-config
            items:
              - key: otel-collector-config.yaml
                path: otel-collector-config.yaml
          name: otel-collector-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: proxy
  name: proxy
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: web
      port: 8888
      protocol: TCP
      targetPort: web
    - name: web-tls
      port: 9443
      protocol: TCP
      targetPort: web-tls
    - name: otel-metrics
      protocol: TCP
      port: 8889
      targetPort: 8889
  selector:
    app: proxy
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: proxy
---
apiVersion: v1
kind: Secret
metadata:
  name: proxy
  annotations:
    kubernetes.io/service-account.name: proxy
type: kubernetes.io/service-account-token
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: konflux-proxy
rules:
- apiGroups: [""]
  resources: ["groups"]
  verbs: ["impersonate"]
  resourceNames: ["system:authenticated"]
- apiGroups: [""]
  resources: ["users"]
  verbs: ["impersonate"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["localsubjectaccessreviews"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: konflux-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: konflux-proxy
subjects:
- kind: ServiceAccount
  name: proxy
  namespace: konflux-ui
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: konflux-proxy-namespace-lister
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: konflux-proxy-namespace-lister
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: konflux-proxy-namespace-lister
subjects:
- kind: ServiceAccount
  name: proxy
  namespace: konflux-ui
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: nginx-proxy-monitor
spec:
  selector:
    matchLabels:
      app: proxy
  endpoints:
  - port: otel-metrics
    interval: 15s
