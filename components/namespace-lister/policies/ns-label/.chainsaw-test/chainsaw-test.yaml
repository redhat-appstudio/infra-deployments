# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: mutate-new-namespace-konflux
spec:
  description: |
    tests that the label is added to a new namespace
    that has the `konflux.ci/type=user` label
  concurrent: false
  namespace: 'mutate-new-namespace'
  steps:
  - name: given-kyverno-has-permission-on-namespaces
    try:
    - apply:
        file: ../kyverno-background-konflux-ns-label-clusterrole.yaml
  - name: given-label-cluster-policy-is-ready
    try:
    - apply:
        file: ../namespace-enforce-label-clusterpolicy.yaml
    - assert:
        file: chainsaw-assert-clusterpolicy.yaml
  - name: when-konfluxci-labeled-namespace-is-created
    try:
    - apply:
        file: resources/actual-namespace-konflux.yaml
        template: true
  - name: then-all-labels-are-injected
    try:
    - assert:
        file: resources/expected-namespace-konflux.yaml
        template: true
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: mutate-new-namespace-toolchain
spec:
  description: |
    tests that the label is added to a new namespace
    that has the `toolchain.dev.openshift.com/type=tenant` label
  concurrent: false
  namespace: "mutate-new-namespace"
  steps:
  - name: given-kyverno-has-permission-on-namespaces
    try:
    - apply:
        file: ../kyverno-background-konflux-ns-label-clusterrole.yaml
  - name: given-label-cluster-policy-is-ready
    try:
    - apply:
        file: ../namespace-enforce-label-clusterpolicy.yaml
    - assert:
        file: chainsaw-assert-clusterpolicy.yaml
  - name: when-konfluxci-labeled-namespace-is-created
    try:
    - apply:
        file: resources/actual-namespace-toolchain.yaml
        template: true
  - name: then-all-labels-are-injected
    try:
    - assert:
        file: resources/expected-namespace-toolchain.yaml
        template: true
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: mutate-new-namespace-konflux-toolchain
spec:
  description: |
    tests that the label is added to a new namespace
    that has bot the `konflux.ci/type=user` and 
    the `toolchain.dev.openshift.com/type=tenant` label
  concurrent: false
  namespace: "mutate-new-namespace"
  steps:
  - name: given-kyverno-has-permission-on-namespaces
    try:
    - apply:
        file: ../kyverno-background-konflux-ns-label-clusterrole.yaml
  - name: given-label-cluster-policy-is-ready
    try:
    - apply:
        file: ../namespace-enforce-label-clusterpolicy.yaml
    - assert:
        file: chainsaw-assert-clusterpolicy.yaml
  - name: when-konfluxci-labeled-namespace-is-created
    try:
    - apply:
        file: resources/actual-namespace-konflux-toolchain.yaml
        template: true
  - name: then-all-labels-are-injected
    try:
    - assert:
        file: resources/expected-namespace-konflux-toolchain.yaml
        template: true
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: mutate-new-namespace-unlabeled
spec:
  description: |
    tests that the label is NOT added to a new namespace
    that has neither the `konflux.ci/type=user` nor 
    the `toolchain.dev.openshift.com/type=tenant` label
  concurrent: false
  namespace: "mutate-new-namespace"
  steps:
  - name: given-kyverno-has-permission-on-namespaces
    try:
    - apply:
        file: ../kyverno-background-konflux-ns-label-clusterrole.yaml
  - name: given-label-cluster-policy-is-ready
    try:
    - apply:
        file: ../namespace-enforce-label-clusterpolicy.yaml
    - assert:
        file: chainsaw-assert-clusterpolicy.yaml
  - name: when-konfluxci-unlabeled-namespace-is-created
    try:
    - apply:
        file: resources/actual-namespace-unlabeled.yaml
        template: true
  - name: then-no-labels-are-injected
    try:
    - assert:
        file: resources/expected-namespace-unlabeled.yaml
        template: true
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: mutate-existing-namespace-konflux
spec:
  description: |
    tests that the label is added to an existing namespace
    that has the `konflux.ci/type=user` label
  concurrent: false
  namespace: mutate-existing-namespace
  steps:
  - name: given-kyverno-has-permission-on-namespaces
    try:
    - apply:
        file: ../kyverno-background-konflux-ns-label-clusterrole.yaml
  - name: given-konfluxci-labeled-namespace-is-created
    try:
    - apply:
        file: resources/actual-namespace-konflux.yaml
        template: true
  - name: when-label-cluster-policy-is-ready
    try:
    - apply:
        file: ../namespace-enforce-label-clusterpolicy.yaml
    - assert:
        file: chainsaw-assert-clusterpolicy.yaml
  - name: then-all-labels-are-injected
    try:
    - assert:
        file: resources/expected-namespace-konflux.yaml
        template: true
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: mutate-existing-namespace-toolchain
spec:
  description: |
    tests that the label is added to an existing namespace
    that has the `toolchain.dev.openshift.com/type=tenant` label
  concurrent: false
  namespace: mutate-existing-namespace
  steps:
  - name: given-kyverno-has-permission-on-namespaces
    try:
    - apply:
        file: ../kyverno-background-konflux-ns-label-clusterrole.yaml
  - name: given-toolchain-labeled-namespace-is-created
    try:
    - apply:
        file: resources/actual-namespace-toolchain.yaml
        template: true
  - name: when-label-cluster-policy-is-ready
    try:
    - apply:
        file: ../namespace-enforce-label-clusterpolicy.yaml
    - assert:
        file: chainsaw-assert-clusterpolicy.yaml
  - name: then-all-labels-are-injected
    try:
    - assert:
        file: resources/expected-namespace-toolchain.yaml
        template: true
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: mutate-existing-namespace-konflux-toolchain
spec:
  description: |
    tests that the label is added to an existing namespace
    that has bot the `konflux.ci/type=user` and 
    the `toolchain.dev.openshift.com/type=tenant` label
  concurrent: false
  namespace: mutate-existing-namespace
  steps:
  - name: given-kyverno-has-permission-on-namespaces
    try:
    - apply:
        file: ../kyverno-background-konflux-ns-label-clusterrole.yaml
  - name: given-konfluxci-labeled-namespace-is-created
    try:
    - apply:
        file: resources/actual-namespace-konflux-toolchain.yaml
        template: true
  - name: when-label-cluster-policy-is-ready
    try:
    - apply:
        file: ../namespace-enforce-label-clusterpolicy.yaml
    - assert:
        file: chainsaw-assert-clusterpolicy.yaml
  - name: then-all-labels-are-injected
    try:
    - assert:
        file: resources/expected-namespace-konflux-toolchain.yaml
        template: true
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: mutate-existing-namespace-unlabeled
spec:
  description: |
    tests that the label is NOT added to an existing namespace
    that has neither the `konflux.ci/type=user` nor 
    the `toolchain.dev.openshift.com/type=tenant` label
  concurrent: false
  namespace: mutate-existing-namespace
  steps:
  - name: given-kyverno-has-permission-on-namespaces
    try:
    - apply:
        file: ../kyverno-background-konflux-ns-label-clusterrole.yaml
  - name: given-konfluxci-unlabeled-namespace-is-created
    try:
    - apply:
        file: resources/actual-namespace-unlabeled.yaml
        template: true
  - name: when-label-cluster-policy-is-ready
    try:
    - apply:
        file: ../namespace-enforce-label-clusterpolicy.yaml
    - assert:
        file: chainsaw-assert-clusterpolicy.yaml
  - name: then-no-labels-are-injected
    try:
    - assert:
        file: resources/expected-namespace-unlabeled.yaml
        template: true
