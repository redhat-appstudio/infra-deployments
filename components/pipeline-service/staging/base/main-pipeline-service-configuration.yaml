apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-1"
  labels:
    argocd.argoproj.io/managed-by: openshift-gitops
  name: openshift-pipelines
---
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-1"
  labels:
    argocd.argoproj.io/managed-by: openshift-gitops
  name: tekton-results
---
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-1"
  labels:
    argocd.argoproj.io/managed-by: openshift-gitops
  name: tekton-logging
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: pipeline-service-exporter
  namespace: openshift-pipelines
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: metrics-reader
  namespace: tekton-results
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-api
  namespace: tekton-results
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-watcher
  namespace: tekton-results
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/name: tekton-results-info
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-info
  namespace: tekton-results
rules:
- apiGroups:
  - ""
  resourceNames:
  - tekton-results-info
  resources:
  - configmaps
  verbs:
  - get
  - describe
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: openshift-gitops-apply-tekton-config-parameters
rules:
- apiGroups:
  - monitoring.coreos.com
  resources:
  - servicemonitors
  verbs:
  - get
  - list
  - patch
  - create
  - delete
- apiGroups:
  - operator.tekton.dev
  resources:
  - tektonconfigs
  verbs:
  - get
  - list
  - patch
  - create
  - delete
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - get
  - list
  - patch
  - create
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: openshift-gitops-jobs-admin
rules:
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - get
  - list
  - patch
  - create
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: pipeline-service-exporter-reader
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - namespaces
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
- apiGroups:
  - tekton.dev
  resources:
  - pipelineruns
  - taskruns
  verbs:
  - get
  - list
  - watch
  - patch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: tekton-chains-public-key-viewer
rules:
- apiGroups:
  - ""
  resourceNames:
  - public-key
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: tekton-results-admin
rules:
- apiGroups:
  - results.tekton.dev
  resources:
  - results
  - records
  - logs
  verbs:
  - create
  - update
  - get
  - list
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-api
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: tekton-results-readonly
rules:
- apiGroups:
  - results.tekton.dev
  resources:
  - results
  - records
  - logs
  - summary
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-readwrite
rules:
- apiGroups:
  - results.tekton.dev
  resources:
  - results
  - records
  - logs
  verbs:
  - create
  - update
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: tekton-results-service-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-watcher
rules:
- apiGroups:
  - results.tekton.dev
  resources:
  - logs
  - results
  - records
  verbs:
  - create
  - get
  - update
- apiGroups:
  - tekton.dev
  resources:
  - pipelineruns
  - taskruns
  verbs:
  - get
  - list
  - patch
  - update
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - tekton.dev
  resources:
  - pipelines
  verbs:
  - get
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: tekton-results-watcher-rbac
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: tekton-chains-public-key-viewer
  namespace: openshift-pipelines
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-chains-public-key-viewer
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/name: tekton-results-info
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-info
  namespace: tekton-results
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-results-info
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: openshift-gitops-apply-tekton-config-parameters
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: openshift-gitops-apply-tekton-config-parameters
subjects:
- kind: ServiceAccount
  name: openshift-gitops-argocd-application-controller
  namespace: openshift-gitops
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: openshift-gitops-jobs-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: openshift-gitops-jobs-admin
subjects:
- kind: ServiceAccount
  name: openshift-gitops-argocd-application-controller
  namespace: openshift-gitops
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: pipeline-service-exporter-reader-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pipeline-service-exporter-reader
subjects:
- kind: ServiceAccount
  name: pipeline-service-exporter
  namespace: openshift-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: prometheus-tekton-results-service-metrics-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-results-service-metrics-reader
subjects:
- kind: ServiceAccount
  name: metrics-reader
  namespace: tekton-results
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-results-api
subjects:
- kind: ServiceAccount
  name: tekton-results-api
  namespace: tekton-results
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-watcher
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-results-watcher
subjects:
- kind: ServiceAccount
  name: tekton-results-watcher
  namespace: tekton-results
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: tekton-results-watcher-logs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-results-admin
subjects:
- kind: ServiceAccount
  name: tekton-results-watcher
  namespace: tekton-results
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: tekton-results-watcher-rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-results-watcher-rbac
subjects:
- kind: ServiceAccount
  name: tekton-results-watcher
  namespace: tekton-results
---
apiVersion: v1
data:
  config.env: |
    DB_USER=
    DB_PASSWORD=
    DB_HOST=
    DB_PORT=5432
    DB_NAME=
    DB_SSLMODE=verify-full
    DB_SSLROOTCERT=/etc/tls/db/tekton-results-db-ca.pem
    DB_ENABLE_AUTO_MIGRATION=true
    SERVER_PORT=8080
    PROMETHEUS_PORT=9090
    PROMETHEUS_HISTOGRAM=true
    TLS_PATH=/etc/tls
    AUTH_DISABLE=false
    AUTH_IMPERSONATE=true
    LOG_LEVEL=info
    LOGS_API=false
    LOGS_TYPE=File
    LOGS_BUFFER_SIZE=5242880
    LOGS_PATH=//logs
    S3_BUCKET_NAME=
    S3_ENDPOINT=
    S3_HOSTNAME_IMMUTABLE=false
    S3_REGION=
    S3_ACCESS_KEY_ID=
    S3_SECRET_ACCESS_KEY=
    S3_MULTI_PART_SIZE=5242880
    GCS_BUCKET_NAME=
    STORAGE_EMULATOR_HOST=
    K8S_QPS=50
    K8S_BURST=100
    PROFILING=true
    PROFILING_PORT=6060
    CONVERTER_ENABLE=false
    CONVERTER_DB_LIMIT=50
    LOGGING_PLUGIN_PROXY_PATH=/api/logs/v1/application
    LOGGING_PLUGIN_TOKEN_PATH=/var/run/secrets/kubernetes.io/serviceaccount/token
    LOGGING_PLUGIN_NAMESPACE_KEY=kubernetes_namespace_name
    LOGGING_PLUGIN_STATIC_LABELS='log_type=application'
    LOGGING_PLUGIN_CA_CERT=
    LOGGING_PLUGIN_QUERY_LIMIT=1700
    LOGGING_PLUGIN_TLS_VERIFICATION_DISABLE=
    LOGGING_PLUGIN_FORWARDER_DELAY_DURATION=10
    LOGGING_PLUGIN_API_URL=s3://tekton-logs
    LOGGING_PLUGIN_QUERY_PARAMS='v1alpha2LogType=true&use_path_style=true'
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-api-config
  namespace: tekton-results
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################
    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.
    # lease-duration is how long non-leaders will wait to try to acquire the
    # lock; 15 seconds is the value used by core kubernetes controllers.
    lease-duration: "60s"
    # renew-deadline is how long a leader will try to renew the lease before
    # giving up; 10 seconds is the value used by core kubernetes controllers.
    renew-deadline: "40s"
    # retry-period is how long the leader election client waits between tries of
    # actions; 2 seconds is the value used by core kubernetes controllers.
    retry-period: "10s"
    # buckets is the number of buckets used to partition key space of each
    # Reconciler. If this number is M and the replica number of the controller
    # is N, the N replicas will compete for the M buckets. The owner of a
    # bucket will take care of the reconciling for the keys partitioned into
    # that bucket.
    buckets: "1"
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/name: tekton-results-leader-election
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-config-leader-election
  namespace: tekton-results
---
apiVersion: v1
data:
  loglevel.controller: info
  loglevel.watcher: info
  zap-logger-config: |
    {
      "level": "info",
      "development": false,
      "outputPaths": ["stdout"],
      "errorOutputPaths": ["stderr"],
      "encoding": "json",
      "encoderConfig": {
        "timeKey": "ts",
        "levelKey": "level",
        "nameKey": "logger",
        "callerKey": "caller",
        "messageKey": "msg",
        "stacktraceKey": "stacktrace",
        "lineEnding": "",
        "levelEncoder": "",
        "timeEncoder": "iso8601",
        "durationEncoder": "string",
        "callerEncoder": ""
      }
    }
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  labels:
    app.kubernetes.io/name: tekton-results-logging
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-config-logging
  namespace: tekton-results
---
apiVersion: v1
data:
  profiling.enable: "true"
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # metrics.backend-destination field specifies the system metrics destination.
    # It supports either prometheus (the default) or stackdriver.
    # Note: Using Stackdriver will incur additional charges.
    metrics.backend-destination: prometheus

    # metrics.stackdriver-project-id field specifies the Stackdriver project ID. This
    # field is optional. When running on GCE, application default credentials will be
    # used and metrics will be sent to the cluster's project if this field is
    # not provided.
    metrics.stackdriver-project-id: "<your stackdriver project id>"

    # metrics.allow-stackdriver-custom-metrics indicates whether it is allowed
    # to send metrics to Stackdriver using "global" resource type and custom
    # metric type. Setting this flag to "true" could cause extra Stackdriver
    # charge.  If metrics.backend-destination is not Stackdriver, this is
    # ignored.
    metrics.allow-stackdriver-custom-metrics: "false"
    metrics.taskrun.level: "task"
    metrics.taskrun.duration-type: "histogram"
    metrics.pipelinerun.level: "pipeline"
    metrics.pipelinerun.duration-type: "histogram"
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/name: tekton-results-observability
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-config-observability
  namespace: tekton-results
---
apiVersion: v1
data:
  maxRetention: "30"
  runAt: 5 5 * * 0
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: tekton-results-retention-policy
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-config-results-retention-policy
  namespace: tekton-results
---
apiVersion: v1
data:
  version: devel
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    app.kubernetes.io/name: tekton-results-info
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-info
  namespace: tekton-results
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
    kubernetes.io/service-account.name: metrics-reader
  name: metrics-reader
  namespace: tekton-results
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  labels:
    app: pipeline-metrics-exporter
  name: pipeline-metrics-exporter-service
  namespace: openshift-pipelines
spec:
  ports:
  - name: metrics
    port: 9117
    protocol: TCP
    targetPort: 9117
  selector:
    app: pipeline-metrics-exporter
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
    ignore-check.kube-linter.io/dangling-service: This service is not dangling, it
      exposes metric for an OSP deployment
  labels:
    app: tekton-chains-controller
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: tekton-chains
  name: tekton-chains
  namespace: openshift-pipelines
spec:
  ports:
  - name: metrics
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: tekton-chains
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
    service.beta.openshift.io/serving-cert-secret-name: tekton-results-tls
  labels:
    app.kubernetes.io/name: tekton-results-api
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-api-service
  namespace: tekton-results
spec:
  ports:
  - name: server
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: metrics
    port: 9443
    protocol: TCP
    targetPort: metrics
  - name: profiling
    port: 6060
    protocol: TCP
    targetPort: 6060
  selector:
    app.kubernetes.io/name: tekton-results-api
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "2"
  labels:
    app.kubernetes.io/name: tekton-results-watcher
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-watcher
  namespace: tekton-results
spec:
  ports:
  - name: watchermetrics
    port: 8443
    targetPort: watchermetrics
  - name: profiling
    port: 8008
  selector:
    app.kubernetes.io/name: tekton-results-watcher
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: pipeline-metrics-exporter
  namespace: openshift-pipelines
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pipeline-metrics-exporter
  template:
    metadata:
      annotations:
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app: pipeline-metrics-exporter
    spec:
      containers:
      - args:
        - -pprof-address
        - "6060"
        - -zap-log-level=6
        image: quay.io/konflux-ci/pipeline-service-exporter:9d2439c8a77d2ce0527cc5aea3fc6561b7671b48
        name: pipeline-metrics-exporter
        ports:
        - containerPort: 9117
          name: metrics
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 128Mi
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      restartPolicy: Always
      serviceAccountName: pipeline-service-exporter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "1"
  labels:
    app.kubernetes.io/name: tekton-results-api
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-api
  namespace: tekton-results
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: tekton-results-api
  template:
    metadata:
      annotations:
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
      labels:
        app.kubernetes.io/name: tekton-results-api
        app.kubernetes.io/version: devel
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:9443
        - --upstream=http://127.0.0.1:9090/
        - --logtostderr=true
        - --v=6
        image: registry.redhat.io/openshift4/ose-kube-rbac-proxy:v4.12
        name: kube-rbac-proxy
        ports:
        - containerPort: 9443
          name: metrics
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
      - env:
        - name: LOGS_API
          value: "true"
        - name: LOGS_TYPE
          value: blob
        - name: S3_HOSTNAME_IMMUTABLE
          value: "true"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: aws_access_key_id
              name: tekton-results-s3
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: aws_secret_access_key
              name: tekton-results-s3
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              key: aws_region
              name: tekton-results-s3
        - name: S3_BUCKET_NAME
          valueFrom:
            secretKeyRef:
              key: bucket
              name: tekton-results-s3
        - name: AWS_ENDPOINT_URL
          valueFrom:
            secretKeyRef:
              key: endpoint
              name: tekton-results-s3
        - name: LOGGING_PLUGIN_API_URL
          valueFrom:
            secretKeyRef:
              key: s3_url
              name: tekton-results-s3
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: db.user
              name: tekton-results-database
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: db.password
              name: tekton-results-database
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              key: db.host
              name: tekton-results-database
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              key: db.name
              name: tekton-results-database
        image: quay.io/konflux-ci/tekton-results-api:f9ff020184f548ef6bafd3570ee1f22b1b4087d9
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 10
        name: api
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        startupProbe:
          failureThreshold: 10
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - mountPath: /etc/tls/db
          name: db-tls-ca
          readOnly: true
        - mountPath: /etc/tekton/results
          name: config
          readOnly: true
        - mountPath: /etc/tls
          name: tls
          readOnly: true
      serviceAccountName: tekton-results-api
      volumes:
      - configMap:
          name: rds-root-crt
        name: db-tls-ca
      - configMap:
          name: tekton-results-api-config
        name: config
      - name: tls
        secret:
          secretName: tekton-results-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: tekton-results-retention-policy-agent
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-retention-policy-agent
  namespace: tekton-results
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: tekton-results-retention-policy-agent
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
      labels:
        app.kubernetes.io/name: tekton-results-retention-policy-agent
        app.kubernetes.io/version: devel
    spec:
      containers:
      - env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: tekton-results-config-logging
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRES_USER
              name: tekton-results-postgres
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_PASSWORD
              name: tekton-results-postgres
        image: quay.io/konflux-ci/tekton-results-retention-policy-agent:f9ff020184f548ef6bafd3570ee1f22b1b4087d9
        name: retention-policy-agent
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /etc/tekton/results
          name: config
          readOnly: true
        - mountPath: /etc/tls
          name: tls
          readOnly: true
      serviceAccountName: tekton-results-watcher
      volumes:
      - configMap:
          name: tekton-results-api-config
        name: config
      - name: tls
        secret:
          secretName: tekton-results-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "2"
  labels:
    app.kubernetes.io/name: tekton-results-watcher
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-watcher
  namespace: tekton-results
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: tekton-results-watcher
  template:
    metadata:
      annotations:
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
      labels:
        app.kubernetes.io/name: tekton-results-watcher
        app.kubernetes.io/version: devel
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: NotIn
                    values:
                      - windows
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: tekton-results-watcher
                topologyKey: kubernetes.io/hostname
              weight: 100
      containers:
        - args:
            - --secure-listen-address=0.0.0.0:8443
            - --upstream=http://127.0.0.1:9090/
            - --logtostderr=true
            - --v=6
          image: registry.redhat.io/openshift4/ose-kube-rbac-proxy:v4.12
          name: kube-rbac-proxy
          ports:
            - containerPort: 8443
              name: watchermetrics
              protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 5m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
        - args:
            - -api_addr
            - tekton-results-api-service.tekton-results.svc.cluster.local:8080
            - -auth_mode
            - token
            - -check_owner=false
            - -completed_run_grace_period
            - 10m
            - -logs_api=true
          env:
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIG_LOGGING_NAME
              value: tekton-results-config-logging
            - name: CONFIG_LEADERELECTION_NAME
              value: tekton-results-config-leader-election
            - name: CONFIG_OBSERVABILITY_NAME
              value: tekton-results-config-observability
            - name: METRICS_DOMAIN
              value: tekton.dev/results
            - name: TEKTON_RESULTS_API_SERVICE
              value: tekton-results-api-service.tekton-pipelines.svc.cluster.local:8080
            - name: AUTH_MODE
              value: token
          image: quay.io/konflux-ci/tekton-results-watcher:f9ff020184f548ef6bafd3570ee1f22b1b4087d9
          name: watcher
          ports:
            - containerPort: 9090
              name: metrics
            - containerPort: 8008
              name: profiling
          resources:
            limits:
              cpu: 250m
              memory: 8Gi
            requests:
              cpu: 250m
              memory: 8Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /etc/tls
              name: tls
              readOnly: true
      serviceAccountName: tekton-results-watcher
      volumes:
        - name: tls
          secret:
            secretName: tekton-results-tls
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: pipeline-service
  namespace: openshift-pipelines
spec:
  endpoints:
  - honorLabels: true
    interval: 15s
    path: /metrics
    port: metrics
    scheme: http
  jobLabel: app
  namespaceSelector:
    matchNames:
    - openshift-pipelines
  selector:
    matchLabels:
      app: pipeline-metrics-exporter
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "1"
  name: tekton-chains-controller
  namespace: openshift-pipelines
spec:
  endpoints:
  - honorLabels: true
    interval: 15s
    path: /metrics
    port: metrics
    scheme: http
  jobLabel: app.kubernetes.io/name
  namespaceSelector:
    matchNames:
    - openshift-pipelines
  selector:
    matchLabels:
      app: tekton-chains-controller
      app.kubernetes.io/component: metrics
      app.kubernetes.io/part-of: tekton-chains
  targetLabels:
  - app
  - app.kubernetes.io/component
  - app.kubernetes.io/part-of
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: tekton-results-api
  namespace: tekton-results
spec:
  endpoints:
  - bearerTokenSecret:
      key: token
      name: metrics-reader
    path: /metrics
    port: metrics
    scheme: https
    tlsConfig:
      insecureSkipVerify: true
  jobLabel: app.kubernetes.io/name
  selector:
    matchLabels:
      app.kubernetes.io/name: tekton-results-api
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: tekton-results-watcher
  namespace: tekton-results
spec:
  endpoints:
  - bearerTokenSecret:
      key: token
      name: metrics-reader
    path: /metrics
    port: watchermetrics
    scheme: https
    tlsConfig:
      insecureSkipVerify: true
  selector:
    matchLabels:
      app.kubernetes.io/name: tekton-results-watcher
---
apiVersion: operator.tekton.dev/v1alpha1
kind: TektonConfig
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: config
spec:
  chain:
    artifacts.oci.storage: oci
    artifacts.pipelinerun.enable-deep-inspection: "true"
    artifacts.pipelinerun.format: in-toto
    artifacts.pipelinerun.storage: oci
    artifacts.taskrun.format: in-toto
    artifacts.taskrun.storage: ""
    options:
      deployments:
        tekton-chains-controller:
          spec:
            template:
              spec:
                containers:
                  - args:
                      - --threads-per-controller=32
                      - --kube-api-qps=50
                      - --kube-api-burst=50
                    name: tekton-chains-controller
    transparency.enabled: "false"
  params:
    - name: createRbacResource
      value: "false"
  pipeline:
    default-service-account: appstudio-pipeline
    enable-api-fields: alpha
    enable-bundles-resolver: true
    enable-cluster-resolver: true
    enable-git-resolver: true
    enable-hub-resolver: true
    enable-step-actions: true
    options:
      configMaps:
        config-logging:
          data:
            loglevel.controller: info
            loglevel.webhook: info
            zap-logger-config: |
              {
                "level": "info",
                "development": false,
                "sampling": {
                  "initial": 100,
                  "thereafter": 100
                },
                "outputPaths": ["stdout"],
                "errorOutputPaths": ["stderr"],
                "encoding": "json",
                "encoderConfig": {
                  "timeKey": "ts",
                  "levelKey": "level",
                  "nameKey": "logger",
                  "callerKey": "caller",
                  "messageKey": "msg",
                  "stacktraceKey": "stacktrace",
                  "lineEnding": "",
                  "levelEncoder": "",
                  "timeEncoder": "iso8601",
                  "durationEncoder": "string",
                  "callerEncoder": ""
                }
              }
        config-defaults:
          data:
            default-container-resource-requirements: |
              default:
                requests:
                  memory: "256Mi"
                  cpu: "100m"
            default-pod-template: |
              nodeSelector:
                konflux-ci.dev/workload: konflux-tenants
              tolerations:
                - key: konflux-ci.dev/workload
                  operator: "Equal"
                  value: "konflux-tenants"
                  effect: "NoSchedule"
            default-timeout-minutes: "120"
        config-leader-election-resolvers:
          data:
            buckets: "8"
      deployments:
        tekton-operator-proxy-webhook:
          spec:
            replicas: 2
            template:
              spec:
                containers:
                  - name: proxy
                    resources:
                      limits:
                        cpu: 500m
                        memory: 500Mi
                      requests:
                        cpu: 100m
                        memory: 100Mi
        tekton-pipelines-webhook:
          spec:
            template:
              spec:
                containers:
                  - name: webhook
                    resources:
                      limits:
                        cpu: "1"
                        memory: 1Gi
                      requests:
                        cpu: 400m
                        memory: 1Gi
      statefusets:
        tekton-pipelines-controller:
          spec:
            template:
              spec:
                containers:
                  - name: tekton-pipelines-controller
                    resources:
                      requests:
                        memory: 12Gi
                        cpu: "1"
                      limits:
                        memory: 12Gi
                topologySpreadConstraints:
                  - maxSkew: 1
                    topologyKey: topology.kubernetes.io/zone
                    whenUnsatisfiable: DoNotSchedule
                    labelSelector:
                      matchLabels:
                        app: tekton-pipelines-controller
      disabled: false
      horizontalPodAutoscalers:
        tekton-operator-proxy-webhook:
          spec:
            maxReplicas: 6
            metrics:
              - resource:
                  name: cpu
                  target:
                    averageUtilization: 100
                    type: Utilization
                type: Resource
              - resource:
                  name: memory
                  target:
                    averageUtilization: 100
                    type: Utilization
                type: Resource
            minReplicas: 2
        tekton-pipelines-webhook:
          spec:
            maxReplicas: 6
            metrics:
              - resource:
                  name: cpu
                  target:
                    averageUtilization: 100
                    type: Utilization
                type: Resource
              - resource:
                  name: memory
                  target:
                    averageUtilization: 100
                    type: Utilization
                type: Resource
            minReplicas: 6
    performance:
      buckets: 4
      disable-ha: false
      kube-api-burst: 50
      kube-api-qps: 50
      replicas: 4
      threads-per-controller: 32
      statefulset-ordinals: true
  platforms:
    openshift:
      pipelinesAsCode:
        enable: true
        options:
          deployments:
            pipelines-as-code-watcher:
              spec:
                replicas: 2
            pipelines-as-code-webhook:
              spec:
                replicas: 2
        settings:
          application-name: Konflux Staging
          custom-console-name: Konflux Staging
          custom-console-url: https://console.dev.redhat.com/application-pipeline
          custom-console-url-pr-details: https://console.dev.redhat.com/application-pipeline/ns/{{
            namespace }}/pipelinerun/{{ pr }}
          custom-console-url-pr-tasklog: https://console.dev.redhat.com/application-pipeline/ns/{{
            namespace }}/pipelinerun/{{ pr }}/logs/{{ task }}
  profile: all
  pruner:
    disabled: true
  targetNamespace: openshift-pipelines
  trigger:
    options:
      configMaps:
        config-logging-triggers:
          data:
            loglevel.controller: info
            loglevel.eventlistener: info
            loglevel.webhook: info
            zap-logger-config: |
              {
                "level": "info",
                "development": false,
                "sampling": {
                  "initial": 100,
                  "thereafter": 100
                },
                "outputPaths": ["stdout"],
                "errorOutputPaths": ["stderr"],
                "encoding": "json",
                "encoderConfig": {
                  "timeKey": "ts",
                  "levelKey": "level",
                  "nameKey": "logger",
                  "callerKey": "caller",
                  "messageKey": "msg",
                  "stacktraceKey": "stacktrace",
                  "lineEnding": "",
                  "levelEncoder": "",
                  "timeEncoder": "iso8601",
                  "durationEncoder": "string",
                  "callerEncoder": ""
                }
              }
---
apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: custom-operators
  namespace: openshift-marketplace
spec:
  displayName: custom-operators
  image: quay.io/openshift-pipeline/openshift-pipelines-pipelines-operator-bundle-container-index@sha256:d34f2de74b26b384643b04e5b391dc3216289f7e351ca36e8b46e4d8b03e47ce
  sourceType: grpc
  updateStrategy:
    registryPoll:
      interval: 30m
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: openshift-pipelines-operator
  namespace: openshift-operators
spec:
  channel: pipelines-5.0
  name: openshift-pipelines-operator-rh
  source: custom-operators
  sourceNamespace: openshift-marketplace
  config:
    env:
      - name: AUTOINSTALL_COMPONENTS
        value: "false"
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-1"
  name: s3-conf
  namespace: tekton-logging
spec:
  dataFrom:
  - extract:
      key: integrations-output/terraform-resources/appsres07ue1/stonesoup-infra-stage/redhat-stg-plnsvc-s3
  refreshInterval: 1h
  secretStoreRef:
    kind: ClusterSecretStore
    name: appsre-vault
  target:
    creationPolicy: Owner
    deletionPolicy: Delete
    name: tekton-results-s3
    template:
      data:
        aws_access_key_id: '{{ .aws_access_key_id }}'
        aws_region: '{{ .aws_region }}'
        aws_secret_access_key: '{{ .aws_secret_access_key }}'
        bucket: '{{ .bucket }}'
        endpoint: https://{{ .endpoint }}
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: vectors-tekton-logs-collector
  namespace: openshift-gitops
spec:
  destination:
    namespace: tekton-logging
    server: https://kubernetes.default.svc
  project: default
  source:
    path: charts/vector
    repoURL: 'https://github.com/vectordotdev/helm-charts'
    targetRevision: "08506fdc01c7cc3fcf2dd83102add7b44980ee23"
    helm:
      valueFiles:
        - values.yaml
      values: |-
        role: Agent
        customConfig:
          data_dir: /vector-data-dir
          api:
            enabled: true
            address: 127.0.0.1:8686
            playground: false
          sources:
            kubernetes_logs:
              type: kubernetes_logs
              rotate_wait_secs: 5
              glob_minimum_cooldown_ms: 15000
              auto_partial_merge: true
              extra_label_selector: "app.kubernetes.io/managed-by in (tekton-pipelines,pipelinesascode.tekton.dev)"
            internal_metrics:
              type: internal_metrics
          transforms:
            remap_app_logs:
              type: remap
              inputs: [kubernetes_logs]
              source: |-
                .log_type = "application"
                .kubernetes_namespace_name = .kubernetes.pod_namespace
                    if exists(.kubernetes.pod_labels."tekton.dev/taskRunUID") {
                      .taskRunUID = del(.kubernetes.pod_labels."tekton.dev/taskRunUID")
                    } else {
                      .taskRunUID = "none"
                      }
                    if exists(.kubernetes.pod_labels."tekton.dev/pipelineRunUID") {
                      .pipelineRunUID = del(.kubernetes.pod_labels."tekton.dev/pipelineRunUID")
                    .result = .pipelineRunUID
                    } else {
                       .result = .taskRunUID
                    }
                    if exists(.kubernetes.pod_labels."tekton.dev/task") {
                      .task = del(.kubernetes.pod_labels."tekton.dev/task")
                    } else {
                      .task = "none"
                    }
                    if exists(.kubernetes.pod_namespace) {
                      .namespace = del(.kubernetes.pod_namespace)
                    } else {
                      .namespace = "unlabeled"
                    }
                    .pod = .kubernetes.pod_name
                    .container = .kubernetes.container_name
          sinks:
            aws_s3:
              type: "aws_s3"
              bucket: ${BUCKET}
              buffer:
                type: "disk"
                max_size: 1073741824
              inputs: ["remap_app_logs"]
              compression: "none"
              endpoint: ${ENDPOINT}
              encoding:
                codec: "text"
              key_prefix: "/logs/{{ `{{ .namespace }}` }}/{{`{{ .result }}`}}/{{`{{ .taskRunUID }}`}}/{{`{{ .container }}`}}"
              filename_time_format: ""
              filename_append_uuid: false
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: tekton-results-s3
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: tekton-results-s3
                key: aws_secret_access_key
          - name: AWS_DEFAULT_REGION
            valueFrom:
              secretKeyRef:
                name: tekton-results-s3
                key: aws_region
          - name: BUCKET
            valueFrom:
              secretKeyRef:
                name: tekton-results-s3
                key: bucket
          - name: ENDPOINT
            valueFrom:
              secretKeyRef:
                name: tekton-results-s3
                key: endpoint
        tolerations:
          - effect: NoSchedule
            key: konflux-ci.dev/workload
            operator: Equal
            value: konflux-tenants
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - NET_BIND_SERVICE
            - SETGID
            - SETPCAP
            - SETUID
          readOnlyRootFilesystem: true
          seLinuxOptions:
            type: spc_t
          seccompProfile:
            type: RuntimeDefault
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    retry:
      backoff:
        duration: 10s
        factor: 2
        maxDuration: 3m
      limit: -1
    syncOptions:
    - CreateNamespace=false
    - Validate=false
---
allowHostDirVolumePlugin: true
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: false
allowPrivilegedContainer: false
allowedCapabilities: null
apiVersion: security.openshift.io/v1
defaultAddCapabilities: null
defaultAllowPrivilegeEscalation: false
forbiddenSysctls:
- '*'
fsGroup:
  type: RunAsAny
groups: []
kind: SecurityContextConstraints
metadata:
  name: logging-scc
  namespace: tekton-logging
priority: null
readOnlyRootFilesystem: true
requiredDropCapabilities:
- CHOWN
- DAC_OVERRIDE
- FSETID
- FOWNER
- SETGID
- SETUID
- SETPCAP
- NET_BIND_SERVICE
- KILL
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
seccompProfiles:
- runtime/default
supplementalGroups:
  type: RunAsAny
users:
- system:serviceaccount:tekton-logging:vectors-tekton-logs-collector
volumes:
- configMap
- emptyDir
- hostPath
- projected
- secret
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
    haproxy.router.openshift.io/hsts_header: max-age=63072000
    haproxy.router.openshift.io/timeout: 86410s
    openshift.io/host.generated: "true"
    router.openshift.io/haproxy.health.check.interval: 86400s
  labels:
    app.kubernetes.io/part-of: tekton-results
  name: tekton-results
  namespace: tekton-results
spec:
  port:
    targetPort: server
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: reencrypt
  to:
    kind: Service
    name: tekton-results-api-service
    weight: 100
  wildcardPolicy: None
---
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: false
allowPrivilegedContainer: false
allowedCapabilities:
- SETFCAP
apiVersion: security.openshift.io/v1
defaultAddCapabilities: null
fsGroup:
  type: MustRunAs
groups:
- system:cluster-admins
kind: SecurityContextConstraints
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: appstudio-pipelines-scc
priority: 10
readOnlyRootFilesystem: false
requiredDropCapabilities:
- MKNOD
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: RunAsAny
users: []
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret
