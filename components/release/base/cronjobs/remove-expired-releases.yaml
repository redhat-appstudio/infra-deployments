---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: remove-expired-releases
  namespace: release-service
spec:
  schedule: "10 03 * * *"
  successfulJobsHistoryLimit: 7
  failedJobsHistoryLimit: 7
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          serviceAccountName: release-service-controller-manager
          volumes:
            - name: temp-directory
              emptyDir: {}
          containers:
            - name: release-cleanup
              command:
                - /bin/bash
                - -c
                - |
                  set -o pipefail
                  PATH="/bin:/usr/bin:/usr/local/bin"
                  MAX_PROCS=5
                  EXPIRED_RELEASES_FILE="/var/tmp/releases-to-be-deleted"
                  NOW=$(date +%s)
                  kubectl get release --all-namespaces \
                  --sort-by=.status.expirationTime \
                  --template '{{range .items}}{{.metadata.name}}{{"\t"}}{{.metadata.namespace}}{{"\t"}}{{.status.expirationTime}}{{"\n"}}{{end}}' > /tmp/kubectl-out
                  awk -v now=${NOW} '{
                       # parsing the expirationTime and converting it to epoch
                       # so we can calculate easier the expired Releases
                       gsub("[:\\-TZ]", " ", $3)
                       t=mktime($3)
                       expirationTime=strftime("%s", t)
                       #
                       # expirationTime should be smaller than today in seconds so it can be deleted
                       if(now > expirationTime) {
                         args="%s:%s"
                         printf(args, $1, $2)
                       } 
                    }' /var/tmp/kubectl-out > $EXPIRED_RELEASES_FILE
                  # The deleteAndLog will run the Release deletion and save the operation in a structured way that        
                  # can be read easily by kubectl or journalctl                                                           
                  function deleteAndLog() {
                    release=${1%:*}
                    namespace=${1#*:}
                    kubectl delete release $release -n $namespace |while read logLine; do
                      echo "INFO: namespace=${namespace} log=${logLine}"
                    done                                                                                                  
                  }                                                                                                       
                  export -f deleteAndLog
                  xargs -a ${EXPIRED_RELEASES_FILE} -i -P ${MAX_PROCS} bash -c 'deleteAndLog "{}"'
              imagePullPolicy: IfNotPresent
              image: quay.io/redhat-appstudio/release-service-utils:305541d8b8c2670dea4b50bd8c56858c365ca11e
              volumeMounts:
                - mountPath: /var/tmp
                  name: temp-directory
              resources:
                limits:
                  cpu: 200m
                  memory: 200Mi
                requests:
                  cpu: 10m
                  memory: 10Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                seccompProfile:
                  type: RuntimeDefault
