# Create service account to add Prometheus Datasource 
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-reader
  namespace: appstudio-grafana
---
# Create CRB for the metrics-reader service account
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cluster-monitoring-view-grafana
subjects:
  - kind: ServiceAccount
    name: metrics-reader
    namespace: appstudio-grafana
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-monitoring-view
---
# Create secret for the metrics-reader service account
apiVersion: v1
kind: Secret
metadata:
  name: metrics-reader
  namespace: appstudio-grafana
  annotations:
    kubernetes.io/service-account.name: metrics-reader
type: kubernetes.io/service-account-token
---
# Create service account to connect to Grafana
# Although the service account is created by the Grafana operator (named <Grafana_name>-sa)
# We create it in advanced and assign a secret to it
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-oauth-sa
  namespace: appstudio-grafana
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
---
# Create and assign a secret for the Grafana service account
apiVersion: v1
kind: Secret
metadata:
  name: grafana-proxy
  namespace: appstudio-grafana
  annotations:
    kubernetes.io/service-account.name: grafana-oauth-sa
type: kubernetes.io/service-account-token
---
# Create Cluster Role for the Grafana service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-proxy
rules:
  - verbs:
      - create
    apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
  - verbs:
      - create
    apiGroups:
      - authorization.k8s.io
    resources:
      - subjectaccessreviews
---
# Create a CRB for the Grafana service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  namespace: appstudio-grafana
  name: grafana-proxy
subjects:
  - kind: ServiceAccount
    name: grafana-oauth-sa
    namespace: appstudio-grafana
roleRef:
  kind: ClusterRole
  name: grafana-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Add Config Map to inject certificates
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: appstudio-grafana
  labels:
    config.openshift.io/inject-trusted-cabundle: "true"
  name: ocp-injected-certs
---
# Create the Grafana instance
# A service account is created automatically by the operator, the name is 
# derived from the grafana name: <Grafana_name>-sa
apiVersion: grafana.integreatly.org/v1beta1
kind: Grafana
metadata:
  namespace: appstudio-grafana
  name: grafana-oauth
  labels: 
    dashboards: "appstudio-grafana"
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  config:
    users:
      viewers_can_edit: "True"
    log:
      mode: "console"
      level: "warn"
    auth.anonymous:
      enabled: "False"
    auth:
      disable_login_form: "False"
      disable_signout_menu: "True"
    auth.basic:
      enabled: "True"
    auth.proxy:
      enabled: "True"
      enable_login_token: "True"
      header_property: username
      header_name: "X-Forwarded-User"
  serviceAccount:
    metadata:
      annotations:
        serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"grafana-access"}}'
  deployment:
    spec:
      template:
        spec:
          volumes:
          - name: grafana-tls
            secret:
              secretName: grafana-tls
          - name: grafana-proxy
            secret:
              secretName: grafana-proxy
          - name: ocp-injected-certs
            configMap:
              name: ocp-injected-certs
          containers:
            - name: grafana-proxy
              args:
                - '-provider=openshift'
                - '-pass-basic-auth=false'
                - '-https-address=:9091'
                - '-http-address='
                - '-email-domain=*'
                - '-upstream=http://localhost:3000'
                - '-openshift-sar={"resource": "namespaces", "resourceName": "appstudio-grafana", "namespace": "appstudio-grafana", "verb": "get"}'
                - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get"}}'
                - '-tls-cert=/etc/tls/private/tls.crt'
                - '-tls-key=/etc/tls/private/tls.key'
                - '-client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token'
                - '-cookie-secret-file=/etc/proxy/secrets/token'
                - '-openshift-service-account=grafana-oauth-sa'
                - '-openshift-ca=/etc/pki/tls/cert.pem'
                - '-openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
                - '-openshift-ca=/etc/proxy/certs/ca-bundle.crt'
                - '-skip-auth-regex=^/metrics'            
              image: quay.io/openshift/origin-oauth-proxy@sha256:b6536bfcfaf30a6425d589facd672bae3245f933b2a7399bda3f12e393bd671b
              ports:
                - containerPort: 9091
                  name: https
              resources: { }
              volumeMounts:
                - mountPath: /etc/tls/private
                  name: grafana-tls
                  readOnly: false
                - mountPath: /etc/proxy/secrets
                  name: grafana-proxy
                  readOnly: false
                - mountPath: /etc/proxy/certs
                  name: ocp-injected-certs
                  readOnly: false
             
  service:
    metadata:
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: grafana-tls
    spec:
      ports:
        - name: https
          port: 9091
          protocol: TCP
          targetPort: https
    
---
# Adding route to Grafana
# The service is created by the operator and named <Grafana_name>-service
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: grafana-access
  namespace: appstudio-grafana
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: grafana-tls
spec:
  port:
    targetPort: https
  tls:
    termination: reencrypt
  to:
    kind: Service
    name: grafana-oauth-service
    weight: 100
  wildcardPolicy: None
---  
# Add prometheus Datasource to Grafana
# Using the thanos-querier url for the datasource
apiVersion: grafana.integreatly.org/v1beta1
kind: GrafanaDatasource
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: prometheus-appstudio-ds
  namespace: appstudio-grafana
spec:
  valuesFrom:
    - targetPath: "secureJsonData.httpHeaderValue1"
      valueFrom:
        secretKeyRef:
          name: "metrics-reader"
          key: "token"
  instanceSelector:
    matchLabels:
      dashboards: "appstudio-grafana"
  datasource:
      access: proxy
      editable: true
      isDefault: true
      jsonData:
        httpHeaderName1: "Authorization"
        timeInterval: 5s
        tlsSkipVerify: true
      name: prometheus-appstudio-ds
      secureJsonData:
        httpHeaderValue1: "Bearer ${token}"
      type: prometheus
      url: 'https://thanos-querier.openshift-monitoring.svc.cluster.local:9091'
---
# Add example dashboard
apiVersion: grafana.integreatly.org/v1beta1
kind: GrafanaDashboard
metadata:
  name: example-dashboard
  labels: 
    app: appstudio-grafana
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  url: https://raw.githubusercontent.com/redhat-appstudio/infra-deployments/main/components/monitoring/grafana/base/generic-dashboards/example.json
  instanceSelector:
    matchLabels:
      dashboards: "appstudio-grafana"
