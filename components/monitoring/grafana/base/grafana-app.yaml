# Create service account to add Prometheus Datasource 
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-reader
  namespace: appstudio-grafana
---
# Create CRB for the metrics-reader service account
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cluster-monitoring-view-grafana
subjects:
  - kind: ServiceAccount
    name: metrics-reader
    namespace: appstudio-grafana
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-monitoring-view
---
# Create secret for the metrics-reader service account
apiVersion: v1
kind: Secret
metadata:
  name: metrics-reader
  namespace: appstudio-grafana
  annotations:
    kubernetes.io/service-account.name: metrics-reader
type: kubernetes.io/service-account-token
---
# Create service account to connect to Grafana
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-serviceaccount
  namespace: appstudio-grafana
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
---
# Create secret for the Grafana service account
apiVersion: v1
kind: Secret
metadata:
  name: grafana-proxy
  namespace: appstudio-grafana
  annotations:
    kubernetes.io/service-account.name: grafana-serviceaccount
type: kubernetes.io/service-account-token
---
# Create Cluster Role for the Grafana service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-proxy
rules:
  - verbs:
      - create
    apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
  - verbs:
      - create
    apiGroups:
      - authorization.k8s.io
    resources:
      - subjectaccessreviews
---
# Create a CRB for the Grafana service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  namespace: appstudio-grafana
  name: grafana-proxy
subjects:
  - kind: ServiceAccount
    name: grafana-serviceaccount
    namespace: appstudio-grafana
roleRef:
  kind: ClusterRole
  name: grafana-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Add Config Map to inject certificates
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: appstudio-grafana
  labels:
    config.openshift.io/inject-trusted-cabundle: "true"
  name: ocp-injected-certs
---
# Create the Grafana instance
apiVersion: integreatly.org/v1alpha1
kind: Grafana
metadata:
  namespace: appstudio-grafana
  name: grafana-oauth
spec:
  config:
    users:
      viewers_can_edit: true
    log:
      mode: "console"
      level: "warn"
    auth.anonymous:
      enabled: false
    auth:
      disable_login_form: False
      disable_signout_menu: True
    auth.basic:
      enabled: True
    auth.proxy:
      enabled: True
      enable_login_token: True
      header_property: username
      header_name: X-Forwarded-User
  dashboardLabelSelector:
    - matchExpressions:
        - key: app
          operator: In
          values:
            - appstudio-grafana
  deployment:
    envFrom:
      - prefix: thanos
        secretRef:
          name: metrics-reader
  containers:
    - args:
        - '-provider=openshift'
        - '-pass-basic-auth=false'
        - '-https-address=:9091'
        - '-http-address='
        - '-email-domain=*'
        - '-upstream=http://localhost:3000'
        - '-openshift-sar={"resource": "namespaces", "verb": "get"}'
        - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get"}}'
        - '-tls-cert=/etc/tls/private/tls.crt'
        - '-tls-key=/etc/tls/private/tls.key'
        - '-client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token'
        - '-cookie-secret-file=/etc/proxy/secrets/token'
        - '-openshift-service-account=grafana-serviceaccount'
        - '-openshift-ca=/etc/pki/tls/cert.pem'
        - '-openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
        - '-openshift-ca=/etc/grafana-configmaps/ocp-injected-certs/ca-bundle.crt'
        - '-skip-auth-regex=^/metrics'
      image: 'quay.io/openshift/origin-oauth-proxy'
      name: grafana-proxy
      ports:
        - containerPort: 9091
          name: https
      resources: {}
      volumeMounts:
        - mountPath: /etc/tls/private
          name: secret-grafana-tls
          readOnly: false
        - mountPath: /etc/proxy/secrets
          name: secret-grafana-proxy
          readOnly: false
  secrets:
    - grafana-tls
    - grafana-proxy
  configMaps:
    - ocp-injected-certs
  service:
    ports:
      - name: https
        port: 9091
        protocol: TCP
        targetPort: https
    annotations:
      service.beta.openshift.io/serving-cert-secret-name: grafana-tls
  ingress:
    enabled: false
    targetPort: https
    termination: reencrypt
    annotations:
      service.beta.openshift.io/serving-cert-secret-name: grafana-tls
  client:
    preferService: True
  serviceAccount:
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"grafana-access"}}'
---
# Adding route to Grafana
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: grafana-access
  namespace: appstudio-grafana
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: grafana-tls
spec:
  port:
    targetPort: https
  tls:
    termination: reencrypt
  to:
    kind: Service
    name: grafana-service
    weight: 100
  wildcardPolicy: None
---  
# Add prometheus Datasource to Grafana
# Using the thanos-querier url for the datasource
apiVersion: integreatly.org/v1alpha1
kind: GrafanaDataSource
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: prometheus-grafanadatasource
  namespace: appstudio-grafana
spec:
  name: prometheus-thanos-grafanadatasource.yaml
  datasources:
    - access: proxy
      editable: true
      isDefault: true
      jsonData:
        httpHeaderName1: Authorization
        timeInterval: 5s
        tlsSkipVerify: true
      name: Prometheus
      secureJsonData:
        httpHeaderValue1: 'Bearer ${thanostoken}'
      type: prometheus
      url: 'https://thanos-querier.openshift-monitoring.svc.cluster.local:9091'
---
# Add example dashboard
apiVersion: integreatly.org/v1alpha1
kind: GrafanaDashboard
metadata:
  name: example-dashboard
  labels: 
    app: appstudio-grafana
spec:
  url: https://raw.githubusercontent.com/redhat-appstudio/infra-deployments/main/components/monitoring/grafana/base/dashboards/example.json
