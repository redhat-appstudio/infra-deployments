## Sample Pipeline for a NodeJs s2i build provided ootb.
#
## If changed by a user, the App Studio HAS service should push the modified 
## Pipeline definition into the user's repository.

## Sample usage by client
##
# apiVersion: tekton.dev/v1beta1
# kind: PipelineRun
# metadata:
#   name: new-pipeline-7vae74
#   namespace: default
# spec:
#   params:
#     - name: url
#       value: 'https://github.com/openshift/console'
#     - name: IMAGE
#       value: 'docker.io/sbose78/sample-nodejs:fooo'
#     - name: PATH_CONTEXT
#       value: frontend
#   pipelineRef:
#     name: new-pipeline
#   serviceAccountName: pipeline
#   timeout: 1h0m0s
#   workspaces:
#     - name: workspace
#       persistentVolumeClaim:
#         claimName: app-studio-default-workspace

apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: nodejs-builder
  namespace: build-templates
  labels:
    "pipelines.openshift.io/used-by" : "build-cloud"
    "pipelines.openshift.io/runtime" : "nodejs"
    "pipelines.openshift.io/strategy" : "s2i"
spec:
  params: 
    - description: 'Source Repository URL'
      name: git-url
      type: string
    - description: 'Fully Qualified Output Image'
      name: output-image
      type: string
    - default: .
      description: The path to your source code
      name: path-context 
      type: string
  tasks:
    - name: s2i-nodejs
      params:
        - name: VERSION
          value: 14-ubi8
        - name: PATH_CONTEXT
          value: "$(params.path-context)"
        - name: TLSVERIFY
          value: 'true'
        - name: IMAGE
          value: "$(params.output-image)"
        - name: BUILDER_IMAGE
          value: >-
            registry.redhat.io/rhel8/buildah@sha256:99cae35f40c7ec050fed3765b2b27e0b8bbea2aa2da7c16408e2ca13c60ff8ee
      runAfter:
        - git-clone
      taskRef:
        kind: ClusterTask
        name: s2i-nodejs
      workspaces:
        - name: source
          workspace: workspace
    - name: git-clone
      params:
        - name: url
          value: "$(params.git-url)"
        - name: submodules
          value: 'true'
        - name: depth
          value: '1'
        - name: sslVerify
          value: 'true'
        - name: deleteExisting
          value: 'true'
        - name: verbose
          value: 'true'
        - name: gitInitImage
          value: >-
            registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:da1aedf0b17f2b9dd2a46edc93ff1c0582989414b902a28cd79bad8a035c9ea4
        - name: userHome
          value: /tekton/home
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace
    - name: show-summary
      runAfter:
        - s2i-nodejs
      taskRef:
        kind: ClusterTask
        name: openshift-client
      params:
        - name: SCRIPT 
          value: |
            #!/usr/bin/env bash
            echo  
            echo "Build Summary:"
            echo
            echo "Build repository: $(params.git-url)" 
            echo "Generated Image is in : $(params.output-image)"  
            echo 
            oc annotate pipelinerun $(context.pipelineRun.name) build.appstudio.openshift.io/repo=$(params.git-url)
            oc annotate pipelinerun $(context.pipelineRun.name) build.appstudio.openshift.io/image=$(params.output-image)

            echo "Output is in the following annotations:"
            
            echo "Build Repo is in 'build.appstudio.openshift.io/repo' "
            echo 'oc get pr $(context.pipelineRun.name) -o jsonpath="{.metadata.annotations.build\.appstudio\.openshift\.io/repo}"' 
            
            echo "Build Image is in 'build.appstudio.openshift.io/image' "
            echo 'oc get pr $(context.pipelineRun.name) -o jsonpath="{.metadata.annotations.build\.appstudio\.openshift\.io/image}"' 

            echo End Summary  
      workspaces:
        - name: manifest-dir 
          workspace: workspace
  workspaces:
    - name: workspace