###
### Setup the namespace for the tenant.
###

apiVersion: v1
kind: Namespace
metadata:
  name: service-registry-staging
spec:
  finalizers:
  - kubernetes
---

###
### Make the staging's GitOps Engine an admin in the tenant's namespace
### This would eventually be managed by the GitOps Service
### 
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grant-argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
- kind: ServiceAccount
  name: openshift-gitops-argocd-application-controller
  namespace: openshift-gitops
---

###
### Make the tenant-specific GitOps Engine an admin in its own namespace
### This should not have been required but issues with creation of 
### PipelineRuns made me add this.
### This would eventually be managed by the GitOps Service
###

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grant-tenant-argocd-admin
  namespace: service-registry-staging
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
- kind: ServiceAccount
  name: tenant-argocd-argocd-application-controller
  namespace: service-registry-staging
---

###
### Tenant-specific GitOps Engine / Argo CD instance.
### This would eventually be managed by the GitOps Service
###


apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: tenant-argocd
  namespace: service-registry-staging 
spec:
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    route:
      enabled: true
    service:
      type: ''
  grafana:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  prometheus:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  initialSSHKnownHosts: {}
  rbac:
    defaultPolicy: ''
    policy: |
      g, system:cluster-admins, role:admin
    scopes: '[groups]'
  repo:
    resources:
      limits:
        cpu: '1'
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
  dex:
    openShiftOAuth: true
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  ha:
    enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  tls:
    ca: {}
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  controller:
    processors: {}
    resources:
      limits:
        cpu: '2'
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 1Gi
    sharding: {}