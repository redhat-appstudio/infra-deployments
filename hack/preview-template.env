# See https://redhat-appstudio.github.io/infra-deployments/docs/development/deployment.html#setting-preview-mode

# Required

## Git remote repo name where is your fork where to push the changes.
## List of remotes -> git remote -v
## Example value: origin
export MY_GIT_FORK_REMOTE=

## HAS enable github integration
### Your GITHUB organization where to manage repositories by HAS
export MY_GITHUB_ORG=
### Personal API token with repo and delete_repo permission
export MY_GITHUB_TOKEN=

## Quay configuration
### Name of Quay organization where the images should be pushed to
export IMAGE_CONTROLLER_QUAY_ORG=
### Token for Quay app under organization
### Create OAuth Application for the organization
### On Application page go to Generate Token tab
### Select Administer organizations, Administer repositories, Create Repositories permissions
export IMAGE_CONTROLLER_QUAY_TOKEN=

# Optional

## HAS enable github integration
### Override Application service image
export HAS_IMAGE_REPO=
export HAS_IMAGE_TAG=
export HAS_PR_OWNER=
export HAS_PR_SHA=
### Override Build service image
export BUILD_SERVICE_IMAGE_REPO=
export BUILD_SERVICE_IMAGE_TAG=
export BUILD_SERVICE_IMAGE_TAG_EXPIRATION=
export BUILD_SERVICE_PR_OWNER=
export BUILD_SERVICE_PR_SHA=
### Override JVM Build service image
export JVM_BUILD_SERVICE_IMAGE_REPO=
export JVM_BUILD_SERVICE_IMAGE_TAG=
export JVM_BUILD_SERVICE_PR_OWNER=
export JVM_BUILD_SERVICE_PR_SHA=
export JVM_BUILD_SERVICE_CACHE_IMAGE=
export JVM_BUILD_SERVICE_REQPROCESSOR_IMAGE=
### Override the default Tekton bundle
export DEFAULT_BUILD_BUNDLE=

## Integration service
### Change of the image
export INTEGRATION_SERVICE_IMAGE_REPO=
export INTEGRATION_SERVICE_IMAGE_TAG=
export INTEGRATION_SERVICE_PR_OWNER=
export INTEGRATION_SERVICE_PR_SHA=

## Release service
### Change of the image
export RELEASE_SERVICE_IMAGE_REPO=
export RELEASE_SERVICE_IMAGE_TAG=
export RELEASE_SERVICE_PR_OWNER=
export RELEASE_SERVICE_PR_SHA=

## SPI integration
### Based on https://github.com/konflux-ci/service-provider-integration-operator#configuration
export SHARED_SECRET= # Random string
export SPI_GITHUB_CLIENT_ID=
export SPI_GITHUB_CLIENT_SECRET=
export SPI_QUAY_CLIENT_ID=
export SPI_QUAY_CLIENT_SECRET=
### Change of the image
# Operator
export SPI_OPERATOR_IMAGE_REPO=
export SPI_OPERATOR_IMAGE_TAG=
export SPI_OPERATOR_PR_OWNER=
export SPI_OPERATOR_PR_SHA=
# Oauth
export SPI_OAUTH_IMAGE_REPO=
export SPI_OAUTH_IMAGE_TAG=
export SPI_OAUTH_PR_OWNER=
export SPI_OAUTH_PR_SHA=
### The API server SPI should use to perform cluster requests. This should be the same as the API server
### used by HAC.
export SPI_API_SERVER=

## Remote Secret
### Change of the image
export REMOTE_SECRET_IMAGE_REPO=
export REMOTE_SECRET_IMAGE_TAG=
export REMOTE_SECRET_PR_OWNER=
export REMOTE_SECRET_PR_SHA=

## Application management
### Deploy only listed applications
export DEPLOY_ONLY=""

## Docker.io authenticated - to avoid pull limits
### Format username:access_token, eg. mkovarik:59028532-a374-11ec-989b-98fa9b70b53f
export DOCKER_IO_AUTH=""

## Pipelines as Code integration
### Instructions for PaC GitHub application creation - https://pipelinesascode.com/docs/install/github_apps/#setup
### Webhook url, webhook secret is managed by preview.sh
### pipelines-as-code-secret is created by preview.sh
export PAC_GITHUB_APP_PRIVATE_KEY= # Base64 encoded private key of the GitHub APP
export PAC_GITHUB_APP_ID= # Application ID
export PAC_GITHUB_APP_WEBHOOK_SECRET= # Webhook secret of the GitHub APP, leave this empty to let preview.sh set it automatically

# GitHub webhook integration (alternative to the GitHub PaC application)
# See https://pipelinesascode.com/docs/install/github_webhook/#setup-git-repository for the required token permissions
# MY_GITHUB_TOKEN is used as fallback
export PAC_GITHUB_TOKEN=

# GitLab webhook integration
# See https://pipelinesascode.com/docs/install/gitlab/#create-gitlab-personal-access-token for the required token permissions
export PAC_GITLAB_TOKEN=

## Image Controller
### Change of the image
export IMAGE_CONTROLLER_IMAGE_REPO=
export IMAGE_CONTROLLER_IMAGE_TAG=
export IMAGE_CONTROLLER_PR_OWNER=
export IMAGE_CONTROLLER_PR_SHA=
