# Required
## Git remote repo name where is your fork where to push the changes.
## List of remotes -> git remote -v
## Example value: origin
export MY_GIT_FORK_REMOTE=

## Cluster and KCP config
### Set cluster kubeconfig
### example: $HOME/.kube/config
export CLUSTER_KUBECONFIG=
### Path to CPS (or any other instance of kcp) kubeconfig so it's not needed to pass it as parameter
### example: $HOME/.kube/preview-kcp
export KCP_KUBECONFIG=
### KCP Workspace to deploy to
### "~" can be used for home workspace
### example: root:test
export ROOT_WORKSPACE=

## CKCP local dev mode 
### For clusters where CKCP is local, the syncer can use an internal service to reach it
### Public IP clusters can leave this blank
### This is required for dev mode CRC where the CKCP routes resolves to 127.0.0.1 and hence route to themselves
### Set to true to use internal svc address/port see configure-kcp for implementation
export CKCP_SYNCER_USE_INTERNAL_SERVICE=

## HAS enable github integration
### Your GITHUB organization where to manage repositories by HAS
export MY_GITHUB_ORG=
### Personal API token with repo and delete_repo permission
export MY_GITHUB_TOKEN=

# Optional

## Pipeline Service pointers
### Pipeline Service workspace, default $ROOT_WORKSPACE:pipeline-service
### On kcp-stable - root:redhat-pipeline-service-compute
export PIPELINE_SERVICE_SP_WORKSPACE=
### Pipeline Service IdentityHash
### When not set then local instance of Pipeline Service is used
### On kcp-stable - 72b2990e51b1931e9fee86e67091b721a8c32f407d762fc847d9d2316a988b52
export PIPELINE_SERVICE_IDENTITY_HASH=
### Automatically deploy Pipeline Service into the cluster
### By default it will not be deployed automatically.
### To deploy automatically set value to "true"
export PIPELINE_SERVICE_LOCAL_DEPLOY=
### Set Pipeline-service tekton-results DB auth
### Default value "tekton-results"
export TEKTON_RESULTS_DATABASE_USER=
### Default value "tekton-results"
export TEKTON_RESULTS_DATABASE_PASSWORD=

## HAS enable github integration
### Override default Application service "image push" repository
export HAS_DEFAULT_IMAGE_REPOSITORY=
### Override Application service image
export HAS_IMAGE_REPO=
export HAS_IMAGE_TAG=
export HAS_PR_OWNER=
export HAS_PR_SHA=
### Override Build service image
export BUILD_SERVICE_IMAGE_REPO=
export BUILD_SERVICE_IMAGE_TAG=
export BUILD_SERVICE_PR_OWNER=
export BUILD_SERVICE_PR_SHA=
### Override JVM Build service image
export JVM_BUILD_SERVICE_IMAGE_REPO=
export JVM_BUILD_SERVICE_IMAGE_TAG=
export JVM_BUILD_SERVICE_PR_OWNER=
export JVM_BUILD_SERVICE_PR_SHA=
export JVM_BUILD_SERVICE_CACHE_IMAGE_REPO=
export JVM_BUILD_SERVICE_CACHE_IMAGE_TAG=
export JVM_BUILD_SERVICE_SIDECAR_IMAGE_REPO=
export JVM_BUILD_SERVICE_SIDECAR_IMAGE_TAG=
export JVM_BUILD_SERVICE_REQPROCESSOR_IMAGE_REPO=
export JVM_BUILD_SERVICE_REQPROCESSOR_IMAGE_TAG=
export JVM_DELETE_TASKRUN_PODS=
export JVM_BUILD_SERVICE_JDK8_BUILDER_IMAGE_REPO=
export JVM_BUILD_SERVICE_JDK8_BUILDER_IMAGE_TAG=
export JVM_BUILD_SERVICE_JDK11_BUILDER_IMAGE_REPO=
export JVM_BUILD_SERVICE_JDK11_BUILDER_IMAGE_TAG=
export JVM_BUILD_SERVICE_JDK17_BUILDER_IMAGE_REPO=
export JVM_BUILD_SERVICE_JDK17_BUILDER_IMAGE_TAG=
### Override the default Tekton bundle
export DEFAULT_BUILD_BUNDLE=

## Integration service
### Change of the image
export INTEGRATION_IMAGE_REPO=
export INTEGRATION_IMAGE_TAG=
export INTEGRATION_RESOURCES=

## Release service
### Change of the image
export RELEASE_IMAGE_REPO=
export RELEASE_IMAGE_TAG=
export RELEASE_RESOURCES=

## SPI integration
### Based on https://github.com/redhat-appstudio/service-provider-integration-operator#configuration
export SPI_TYPE= # GitHub
export SPI_CLIENT_ID=
export SPI_CLIENT_SECRET=
### Change of the image
export SPI_OPERATOR_IMAGE_REPO=
export SPI_OPERATOR_IMAGE_TAG=
### The API server SPI should use to perform cluster requests. This should be the same as the API server
### used by HAC.
export SPI_API_SERVER=

## Application management
### Deploy only listed applications
export DEPLOY_ONLY=""

## Docker.io authenticated - to avoid pull limits
### Format username:access_token, eg. mkovarik:59028532-a374-11ec-989b-98fa9b70b53f
export DOCKER_IO_AUTH=""

## Pipelines as Code integration
### Instructions for PaC GitHub application creation - https://pipelinesascode.com/docs/install/github_apps/#setup
### Webhook url, webhook secret is managed by preview.sh
### pipelines-as-code-secret is created by preview.sh
export PAC_GITHUB_APP_PRIVATE_KEY= # Base64 encoded private key of the GitHub APP
export PAC_GITHUB_APP_ID= # Application ID

# GitHub webhook integration (alternative to the GitHub PaC application)
# See https://pipelinesascode.com/docs/install/github_webhook/#setup-git-repository for the required token permissions
# MY_GITHUB_TOKEN is used as fallback
export PAC_GITHUB_TOKEN=

# GitLab webhook integration
# See https://pipelinesascode.com/docs/install/gitlab/#create-gitlab-personal-access-token for the required token permissions
export PAC_GITLAB_TOKEN=
