apiVersion: v1
kind: Template
metadata:
  name: observability-per-cluster-grafana
objects:

# the secret used by the `oauth-proxy` sidecar container of Grafana to authenticate users on GitHub
- apiVersion: v1
  kind: Secret
  metadata:
    namespace: ${MONITORING_NAMESPACE}
    name: grafana-proxy-config
    labels:
      provider: appstudio-sre
  data:
    client-id: ${GRAFANA_GITHUB_CLIENT_ID}
    client-secret: ${GRAFANA_GITHUB_CLIENT_SECRET}
    cookie-secret: ${GRAFANA_GITHUB_COOKIE_SECRET}
  type: Opaque

# The `grafana/grafana` resource triggers the deployment of the Grafana pods
- apiVersion: integreatly.org/v1alpha1
  kind: Grafana
  metadata:
    name: appstudio-grafana
  spec:
    config:
      log:
        mode: "console"
        level: "warn"
      security:
        admin_user: ${GRAFANA_ADMIN_USER}
        admin_password: ${GRAFANA_ADMIN_PASSWD}
      auth.anonymous:
        enabled: False
      auth:
        disable_login_form: False
        disable_signout_menu: True
      auth.basic:
        enabled: False
      auth.proxy:
        enabled: True
        enable_login_token: True
        header_property: username
        header_name: X-Forwarded-User
    dashboardLabelSelector:
      - matchExpressions:
          - {key: app, operator: In, values: [grafana]}
    containers:
      - args:
        - --provider=github
        - --https-address=:9091
        - --email-domain=*
        - --upstream=http://localhost:3000
        - --tls-cert-file=/etc/tls/private/tls.crt
        - --tls-key-file=/etc/tls/private/tls.key
        - --skip-auth-regex=^/metrics
        - --skip-auth-regex=^/ping
        - --github-org=redhat-appstudio-sre
        - --github-team=stage
        image: quay.io/pusher/oauth2_proxy:${OAUTH2_PROXY_VERSION}
        name: oauth2-proxy
        imagePullPolicy: Always
        env:
        - name: OAUTH2_PROXY_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: client-id
              name: grafana-proxy-config
        - name: OAUTH2_PROXY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: client-secret
              name: grafana-proxy-config
        - name: OAUTH2_PROXY_COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              key: cookie-secret
              name: grafana-proxy-config
        ports:
          - containerPort: 9091
            name: oauth2-proxy
            protocol: TCP
        resources: {}
        readinessProbe:
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          httpGet:
            scheme: HTTPS
            port: oauth2-proxy
            path: /ping
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
          - mountPath: /etc/tls/private
            name: secret-grafana-tls
            readOnly: false
    secrets:
      - grafana-tls
      - grafana-proxy-config
    service:
      ports:
        - name: oauth2-proxy
          port: 9091
          protocol: TCP
          targetPort: 9091
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: grafana-tls
    ingress:
      enabled: True
      targetPort: oauth2-proxy
      termination: reencrypt
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: grafana-tls
    client:
      preferService: True
    serviceAccount:
      annotations:
        serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"grafana-access"}}'
    resources:
      limits:
        cpu: 2000m
        memory: 8000Mi
      requests:
        cpu: 100m
        memory: 200Mi

# Route and service to provide a secured access to the Grafana console
# via the oauth2-proxy sidecar (ie, that's the route for the human beings)
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    namespace: ${MONITORING_NAMESPACE}
    name: grafana
    labels:
      provider: appstudio-sre
    annotations:
      kubernetes.io/tls-acme: "true"
  spec:
    to:
      kind: Service
      name: grafana-service
    port:
      targetPort: oauth2-proxy
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: reencrypt

# Route and service to provide a secured access to the Grafana admin console
# without the oauth-proxy sidecar (ie, that's the route for Grafana Admins)
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    namespace: ${MONITORING_NAMESPACE}
    name: grafana-local
    labels:
      provider: appstudio-sre
    annotations:
      kubernetes.io/tls-acme: "true"
  spec:
    to:
      kind: Service
      name: grafana-service
      weight: 100
    port:
      targetPort: grafana

- kind: Service
  apiVersion: v1
  metadata:
    name: grafana-service
    namespace: {MONITORING_NAMESPACE}
  spec:
    ports:
      - name: grafana
        protocol: TCP
        port: 3000
        targetPort: 3000
      - name: oauth2-proxy
        protocol: TCP
        port: 9091
        targetPort: 9091
    internalTrafficPolicy: Cluster
    type: ClusterIP
    selector:
      app: grafana

parameters:
- name: MONITORING_NAMESPACE
  required: true
- name: CLUSTER_LABEL
  value: appstudio-stage
- name: LOG_LEVEL
  value: debug
- name: RETENTION
  value: 45d
- name: OAUTH2_PROXY_VERSION
  value: v6.1.1
- name: GRAFANA_GITHUB_CLIENT_ID
  required: true
- name: GRAFANA_GITHUB_CLIENT_SECRET
  required: true
- name: GRAFANA_GITHUB_COOKIE_SECRET
  required: true
- name: GRAFANA_ADMIN_USER
  required: true
- name: GRAFANA_ADMIN_PASSWD
  required: true
- name: GRAFANA_K8S_SECRET_NAME
  #required: true
- name: LOKI_SECRET_NAME
  #  required: true
