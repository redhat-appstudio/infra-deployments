apiVersion: v1
kind: Template
metadata:
  name: observability-per-cluster
objects:

# the secret used by the `oauth-proxy` sidecar container of Prometheus to authenticate users on GitHub
- apiVersion: v1
  kind: Secret
  metadata:
    namespace: ${MONITORING_NAMESPACE}
    name: prometheus-proxy-config
    labels:
      provider: appstudio-sre
  data:
    client-id: ${PROMETHEUS_GITHUB_CLIENT_ID}
    client-secret: ${PROMETHEUS_GITHUB_CLIENT_SECRET}
    cookie-secret: ${PROMETHEUS_GITHUB_COOKIE_SECRET}
  type: Opaque

# The `prometheus/prometheus` resource triggers the deployment of the Prometheus pods
- apiVersion: monitoring.coreos.com/v1
  kind: Prometheus
  metadata:
    namespace: ${MONITORING_NAMESPACE}
    name: prometheus
    labels:
      provider: appstudio-sre
      app.kubernetes.io/instance: prometheus
  spec:
    alerting:
      alertmanagers:
      - name: alertmanager-operated
        namespace: ${MONITORING_NAMESPACE}
        port: web
        scheme: http
    image: quay.io/prometheus/prometheus:${PROMETHEUS_VERSION}
    externalLabels:
      cluster: ${CLUSTER_LABEL}
    logLevel: ${LOG_LEVEL}
    replicas: 2
    retention: ${RETENTION}
    walCompression: ${{WAL_COMPRESSION}}
    ruleSelector:
      matchLabels:
        prometheus: appstudio-sre
    securityContext: {}
    serviceAccountName: prometheus-k8s
    serviceMonitorSelector:
      matchLabels:
        prometheus: appstudio-sre
    ruleNamespaceSelector:
      matchLabels:
        openshift.io/workload-monitoring: "true"
    storage:
      volumeClaimTemplate:
        apiVersion: v1
        kind: PersistentVolumeClaim
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: ${PV_SIZE}
          storageClassName: gp2
    version: ${PROMETHEUS_VERSION}
    volumeMounts:
      - mountPath: /etc/prometheus/tls
        name: secret-prometheus-oauth2-tls
    volumes:
    - name: secret-prometheus-oauth2-tls
      secret:
        secretName: prometheus-oauth2-tls
    - name: secret-prometheus-oauth-tls
      secret:
        secretName: prometheus-oauth-tls
    containers:
    # extra container to have an access to the Prometheus console to human users who need to login via GitHub
    - name: oauth2-proxy
      args:
      - --provider=github
      - --https-address=:9091
      - --email-domain=*
      - --upstream=http://localhost:9090
      - --tls-cert-file=/etc/tls/private/tls.crt
      - --tls-key-file=/etc/tls/private/tls.key
      - --skip-auth-regex=^/metrics
      - --skip-auth-regex=^/ping
      - --github-org=redhat-appstudio-sre
      - --github-team=stage
      env:
      - name: OAUTH2_PROXY_CLIENT_ID
        valueFrom:
          secretKeyRef:
            key: client-id
            name: prometheus-proxy-config
      - name: OAUTH2_PROXY_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            key: client-secret
            name: prometheus-proxy-config
      - name: OAUTH2_PROXY_COOKIE_SECRET
        valueFrom:
          secretKeyRef:
            key: cookie-secret
            name: prometheus-proxy-config
      image: quay.io/pusher/oauth2_proxy:${OAUTH2_PROXY_VERSION}
      imagePullPolicy: Always
      ports:
      - name: oauth2-proxy
        containerPort: 9091
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        httpGet:
          scheme: HTTPS
          port: oauth2-proxy
          path: /ping
        timeoutSeconds: 1
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/tls/private
        name: secret-prometheus-oauth2-tls
    # extra container to have an access to Prometheus from Grafana, using a SA token
    - name: oauth-proxy
      image: quay.io/openshift/origin-oauth-proxy:${OAUTH_PROXY_VERSION}
      imagePullPolicy: IfNotPresent
      ports:
      - name: oauth-proxy
        containerPort: 9092
        protocol: TCP
      args:
      - --https-address=:9092
      - --provider=openshift
      - --openshift-service-account=prometheus-k8s
      - --upstream=http://localhost:9090
      - --tls-cert=/etc/tls/private/tls.crt
      - --tls-key=/etc/tls/private/tls.key
      - --cookie-secret=SECRET
      # see https://github.com/openshift/oauth-proxy/#delegate-authentication-and-authorization-to-openshift-for-infrastructure
      - --openshift-delegate-urls={"/":{"group":"","resource":"namespaces","verb":"get"}}
      volumeMounts:
      - mountPath: /etc/tls/private
        name: secret-prometheus-oauth-tls

# Route and service to provide a secured access to the Prometheus console
# via the oauth2-proxy sidecar (ie, that's the route for the human beings)
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    namespace: ${MONITORING_NAMESPACE}
    name: prometheus
    labels:
      provider: appstudio-sre
    annotations:
      kubernetes.io/tls-acme: "true"
  spec:
    to:
      kind: Service
      name: prometheus-oauth2
    port:
      targetPort: oauth2-proxy
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: reencrypt

- apiVersion: v1
  kind: Service
  metadata:
    namespace: ${MONITORING_NAMESPACE}
    name: prometheus-oauth2
    labels:
      provider: appstudio-sre
      app.kubernetes.io/instance: prometheus
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: prometheus-oauth2-tls
  spec:
    ports:
    - name: oauth2-proxy
      port: 9091
      protocol: TCP
      targetPort: 9091
    selector:
      app.kubernetes.io/instance: prometheus

# Route and service to provide a secured access to the Prometheus console
# via the oauth-proxy sidecar (ie, that's the route for Grafana with a Service Account token)
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    namespace: ${MONITORING_NAMESPACE}
    name: prometheus-oauth
    labels:
      provider: appstudio-sre
    annotations:
      kubernetes.io/tls-acme: "true"
  spec:
    to:
      kind: Service
      name: prometheus-oauth
    port:
      targetPort: oauth-proxy
    tls:
      termination: reencrypt

- apiVersion: v1
  kind: Service
  metadata:
    namespace: ${MONITORING_NAMESPACE}
    name: prometheus-oauth
    labels:
      provider: appstudio-sre
      app.kubernetes.io/instance: prometheus
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: prometheus-oauth-tls
  spec:
    ports:
    - name: oauth-proxy
      port: 9092
      protocol: TCP
      targetPort: 9092
    selector:
      app.kubernetes.io/instance: prometheus

- apiVersion: monitoring.coreos.com/v1
  kind: PrometheusRule
  metadata:
    namespace: ${MONITORING_NAMESPACE}
    name: deadmanssnitch
    labels:
      prometheus: appstudio-sre
      role: alert-rules
  spec:
    groups:
    - name: deadmanssnitch
      rules:
      - alert: SnitchHeartBeat
        interval: 1m
        annotations:
          message: "SnitchHeartBeat: ${CLUSTER_LABEL} has not reported to Deadmanssnitch"
          runbook: "https://gitlab.cee.redhat.com/service/app-interface/tree/master/docs/app-sre/sop/prometheus/prometheus-deadmanssnitch.md"
        expr: vector(1)
        labels:
          severity: deadman

parameters:
- name: MONITORING_NAMESPACE
  required: true
- name: CLUSTER_LABEL
  value: appstudio-stage
- name: LOG_LEVEL
  value: debug
- name: RETENTION
  value: 45d
- name: WAL_COMPRESSION
  value: 'true'
- name: PV_SIZE
  value: 50Gi
- name: PROMETHEUS_VERSION
  value: v2.25.2
- name: OAUTH_PROXY_VERSION
  value: 4.9.0
- name: OAUTH2_PROXY_VERSION
  value: v6.1.1
- name: PROMETHEUS_GITHUB_CLIENT_ID
  required: true
- name: PROMETHEUS_GITHUB_CLIENT_SECRET
  required: true
- name: PROMETHEUS_GITHUB_COOKIE_SECRET
  required: true
- name: PROMETHEUS_K8S_SECRET_NAME
  required: true
